// <auto-generated />
using System;
using LaShoppeeFinalVersion.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LaShoppeeFinalVersion.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LaShoppeeFinalVersion.Models.Books", b =>
                {
                    b.Property<int>("bookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bookDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bookImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bookImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("bookInStock")
                        .HasColumnType("bit");

                    b.Property<string>("bookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("bookOnSale")
                        .HasColumnType("bit");

                    b.Property<decimal>("bookPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.HasKey("bookId");

                    b.HasIndex("categoryId");

                    b.ToTable("bookies");

                    b.HasData(
                        new
                        {
                            bookId = 1,
                            bookDescription = "A fiction story about an indian girl by chetan bhagat",
                            bookImageThumbnailUrl = "\\Images\\OneIndianGirl.jpg",
                            bookImageUrl = "\\Images\\OneIndianGirl.jpg",
                            bookInStock = true,
                            bookName = "Onew Indian Girl",
                            bookOnSale = false,
                            bookPrice = 350m,
                            categoryId = 1
                        },
                        new
                        {
                            bookId = 2,
                            bookDescription = "A fiction story about an indian girl by chetan bhagat",
                            bookImageThumbnailUrl = "\\Images\\Fictiontwo.jpg",
                            bookImageUrl = "\\Images\\Fictiontwo.jpg",
                            bookInStock = true,
                            bookName = "Ray Bearer",
                            bookOnSale = false,
                            bookPrice = 399m,
                            categoryId = 1
                        },
                        new
                        {
                            bookId = 3,
                            bookDescription = "A fiction story about an indian girl by chetan bhagat",
                            bookImageThumbnailUrl = "\\Images\\Fictionthree.jpg",
                            bookImageUrl = "\\Images\\Fictionthree.jpg",
                            bookInStock = true,
                            bookName = "What People Won't Do",
                            bookOnSale = false,
                            bookPrice = 999m,
                            categoryId = 1
                        },
                        new
                        {
                            bookId = 4,
                            bookDescription = "A Non-fiction story about Squirrel Busy years",
                            bookImageThumbnailUrl = "\\Images\\nonfictiononee.jpg",
                            bookImageUrl = "\\Images\\nonfictiononee.jpg",
                            bookInStock = true,
                            bookName = "Squirrels Busy Year",
                            bookOnSale = false,
                            bookPrice = 1999m,
                            categoryId = 2
                        },
                        new
                        {
                            bookId = 5,
                            bookDescription = "A Non-fiction story about elephants and animals",
                            bookImageThumbnailUrl = "\\Images\\nonfictiontwoo.jpg",
                            bookImageUrl = "\\Images\\nonfictiontwoo.jpg",
                            bookInStock = true,
                            bookName = "Just So Stories",
                            bookOnSale = false,
                            bookPrice = 899m,
                            categoryId = 2
                        },
                        new
                        {
                            bookId = 6,
                            bookDescription = "A Non-fiction story about Penguins",
                            bookImageThumbnailUrl = "\\Images\\nonfictionthreee.jpg",
                            bookImageUrl = "\\Images\\nonfictionthreee.jpg",
                            bookInStock = true,
                            bookName = "Penguins",
                            bookOnSale = false,
                            bookPrice = 1899m,
                            categoryId = 2
                        },
                        new
                        {
                            bookId = 7,
                            bookDescription = "Adventure genre",
                            bookImageThumbnailUrl = "\\Images\\adventureone.jpg",
                            bookImageUrl = "\\Images\\adventureone.jpg",
                            bookInStock = true,
                            bookName = "The Leopard Princess",
                            bookOnSale = false,
                            bookPrice = 599m,
                            categoryId = 3
                        },
                        new
                        {
                            bookId = 8,
                            bookDescription = "Adventure genre on Dragon Run",
                            bookImageThumbnailUrl = "\\Images\\adventuretwo.jpg",
                            bookImageUrl = "\\Images\\adventuretwo.jpg",
                            bookInStock = true,
                            bookName = "Dragon Run",
                            bookOnSale = false,
                            bookPrice = 479m,
                            categoryId = 3
                        },
                        new
                        {
                            bookId = 9,
                            bookDescription = "Adventure genre on Dragon Run",
                            bookImageThumbnailUrl = "\\Images\\adventurethree.jpg",
                            bookImageUrl = "\\Images\\adventurethree.jpg",
                            bookInStock = true,
                            bookName = "The Town House",
                            bookOnSale = false,
                            bookPrice = 479m,
                            categoryId = 3
                        },
                        new
                        {
                            bookId = 10,
                            bookDescription = "Romantic love story",
                            bookImageThumbnailUrl = "\\Images\\romanticone.jpg",
                            bookImageUrl = "\\Images\\romanticone.jpg",
                            bookInStock = true,
                            bookName = "Love Song",
                            bookOnSale = false,
                            bookPrice = 879m,
                            categoryId = 4
                        },
                        new
                        {
                            bookId = 11,
                            bookDescription = "Romantic love story being Wild in Love",
                            bookImageThumbnailUrl = "\\Images\\romantictwo.jpg",
                            bookImageUrl = "\\Images\\romantictwo.jpg",
                            bookInStock = true,
                            bookName = "Wild In Love",
                            bookOnSale = true,
                            bookPrice = 379m,
                            categoryId = 4
                        },
                        new
                        {
                            bookId = 12,
                            bookDescription = "Romantic love story beast",
                            bookImageThumbnailUrl = "\\Images\\romanticthree.jpg",
                            bookImageUrl = "\\Images\\romanticthree.jpg",
                            bookInStock = false,
                            bookName = "Romantic and the Clock Work Beast",
                            bookOnSale = true,
                            bookPrice = 379m,
                            categoryId = 4
                        });
                });

            modelBuilder.Entity("LaShoppeeFinalVersion.Models.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            categoryId = 1,
                            categoryName = "Fiction Genre"
                        },
                        new
                        {
                            categoryId = 2,
                            categoryName = "Non-Fiction Genre"
                        },
                        new
                        {
                            categoryId = 3,
                            categoryName = "Thrilling Genre"
                        },
                        new
                        {
                            categoryId = 4,
                            categoryName = "Romantic Genre"
                        });
                });

            modelBuilder.Entity("LaShoppeeFinalVersion.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LaShoppeeFinalVersion.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BooksbookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("bookId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("BooksbookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("LaShoppeeFinalVersion.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("shoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BooksbookId")
                        .HasColumnType("int");

                    b.Property<string>("shoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("shoppingCartItemId");

                    b.HasIndex("BooksbookId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LaShoppeeFinalVersion.Models.Books", b =>
                {
                    b.HasOne("LaShoppeeFinalVersion.Models.Category", "Category")
                        .WithMany("Bookies")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaShoppeeFinalVersion.Models.OrderDetail", b =>
                {
                    b.HasOne("LaShoppeeFinalVersion.Models.Books", "Books")
                        .WithMany()
                        .HasForeignKey("BooksbookId");

                    b.HasOne("LaShoppeeFinalVersion.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaShoppeeFinalVersion.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("LaShoppeeFinalVersion.Models.Books", "Books")
                        .WithMany()
                        .HasForeignKey("BooksbookId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
